// <auto-generated />
using System;
using EksiSozlukAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EksiSozlukAPI.Persistence.Migrations
{
    [DbContext(typeof(EksiSozlukAPIDbContext))]
    partial class EksiSozlukAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ıd");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.ToTable("channels");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ıd");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("FavCount")
                        .HasColumnType("integer")
                        .HasColumnName("fav_count");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uuid")
                        .HasColumnName("title_ıd");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_ıd");

                    b.HasKey("Id")
                        .HasName("pk_entries");

                    b.HasIndex("TitleId")
                        .HasDatabaseName("ıx_entries_title_ıd");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ıx_entries_user_ıd");

                    b.ToTable("entries");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ıd");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ıd");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_ıd");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("EntryCount")
                        .HasColumnType("integer")
                        .HasColumnName("entry_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_titles");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ıx_titles_channel_ıd");

                    b.ToTable("titles");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ıd");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_ıd");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_ıd");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ıx_user_roles_role_ıd");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.Entry", b =>
                {
                    b.HasOne("EksiSozlukAPI.Domain.Entities.Title", "Title")
                        .WithMany("Entries")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entries_titles_title_ıd");

                    b.HasOne("EksiSozlukAPI.Domain.Entities.User", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entries_users_user_ıd");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.Title", b =>
                {
                    b.HasOne("EksiSozlukAPI.Domain.Entities.Channel", "Channel")
                        .WithMany("Titles")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_titles_channels_channel_ıd");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("EksiSozlukAPI.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_ıd");

                    b.HasOne("EksiSozlukAPI.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_ıd");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.Channel", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.Title", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("EksiSozlukAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
